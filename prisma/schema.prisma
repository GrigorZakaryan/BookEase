// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  businesses    Business[]
  employments   Employee?
  customer      Customer?
  // Optional for WebAuthn support
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Business {
  id            String          @id @default(cuid())
  name          String
  address       String
  type          String
  featured      Boolean         @default(false)
  image         String?         
  ownerId       String
  owner         User @relation(fields: [ownerId], references: [id])
  services      Service[]
  employees     Employee[]
  appointments  Appointment[]
  customers     Customer[]
  workingHours  WorkingHours[]
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id            String          @id @default(cuid())
  label         String
  description   String
  price         Decimal
  duration      String
  businessId    String
  business      Business        @relation(fields: [businessId], references: [id])
  appointments  Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  image         String         
  userId        String?         @unique
  user          User?           @relation(fields: [userId], references: [id])
  isOwner       Boolean         @default(false)
  status        EmployeeStatus  @default(INVITED)
  businessId    String
  business      Business        @relation(fields: [businessId], references: [id])
  appointments  Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id            String          @id @default(cuid())
  userId        String?         @unique
  user          User?           @relation(fields: [userId], references: [id])
  name          String?
  phone         String?
  email         String?
  image         String?
  appointments  Appointment[]
  businessId    String
  business      Business        @relation(fields: [businessId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AppointmentStatus {
  UPCOMING
  CANCELED
  PAID
}

enum EmployeeStatus {
  INVITED
  ACTIVE
  DECLINED
  ERROR
}


model WorkingHours {
  id           String          @id @default(cuid())
  businessId   String   @unique
  business     Business @relation(fields: [businessId], references: [id])
  
  mondayStart  String?
  mondayEnd    String?
  
  tuesdayStart String?
  tuesdayEnd   String?
  
  wednesdayStart String?
  wednesdayEnd String?
  
  thursdayStart String?
  thursdayEnd   String?
  
  fridayStart String?
  fridayEnd   String?
  
  saturdayStart String?
  saturdayEnd   String?
  
  sundayStart String?
  sundayEnd   String?

}

model Appointment {
  id            String          @id @default(cuid())
  customerId    String
  customer      Customer        @relation(fields: [customerId], references: [id])
  serviceId     String
  service       Service         @relation(fields: [serviceId], references: [id])
  employeeId    String
  employee      Employee        @relation(fields: [employeeId], references: [id])
  businessId    String
  business      Business        @relation(fields: [businessId], references: [id])
  date          DateTime
  status        AppointmentStatus          @default(UPCOMING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}